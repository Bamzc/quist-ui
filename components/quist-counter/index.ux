<template>
  <div class="quist-counter" style="{{wrapperStyle()}}">
    <div class="quist-counter-reduce" style="{{operationStyle()}}" onclick="reduceClicked" disabled="{{disabled}}">
      <text style="{{reduceStyle()}}">-</text>
    </div>
    <text class="quist-counter-input" style="{{inputStyle()}}">{{counterValue}}</text>
    <div class="quist-counter-plus" style="{{operationStyle()}}" onclick="plusClicked" disabled="{{disabled}}">
      <text style="{{plusStyle()}}">+</text>
    </div>
  </div>
</template>

<style lang="less">
  @import "../../style/index.less";
  @import "../../style/components/quist-counter/index.less";
</style>

<script>
  export default {
    props: {
      value: {
        type: Number,
        default: 0
      },
      min: {
        type: Number,
        default: 0
      },
      max: {
        type: Number
      },
      disabled: {
        type: Boolean,
        default: false
      },
      borderRadius: {
        type: Number,
        default: 6
      },
      borderColor: {
        type: String,
        default: '#d9d9d9'
      },
      width: {
        type: Number,
        default: 240
      },
      height: {
        type: Number,
        default: 80
      },
      bgColor: {
        type: String,
        default: '#f3f2f8'
      },
      fSize: {
        type: Number,
        default: 32
      },
      fColor: {
        type: String,
        default: '#666666'
      },
      disabledColor: {
        type: String,
        default: '#cccccc'
      }
    },
    data() {
      return {
        counterValue: this.value,
        reduceDisabled: false,
        plusDisabled: false
      }
    },
    onInit() {
      if (this.min && (this.value < this.min)) {
        this.counterValue = this.min
        this.reduceDisabled = true
      } else if (this.max && (this.value > this.max)) {
        this.counterValue = this.max
        this.plusDisabled = true
      }
    },
    reduceClicked() {
      if (this.counterValue === this.min) {
        this.counterValue = this.min
      } else {
        this.counterValue -= 1
      }
      if (this.counterValue <= this.min) {
        this.reduceDisabled = true
      } else {
        this.reduceDisabled = false
        this.plusDisabled = false
      }
      this.$emit('onChange', {value: this.counterValue})
    },
    plusClicked() {
      if (this.counterValue === this.max) {
        this.counterValue = this.max
      } else {
        this.counterValue += 1
      }
      if (this.counterValue >= this.max) {
        this.plusDisabled = true
      } else {
        this.reduceDisabled = false
        this.plusDisabled = false
      }
      this.$emit('onChange', {value: this.counterValue})
    },
    wrapperStyle() {
      let baseStyle = {
        width: this.width + 'px',
        height: this.height + 'px',
        borderRadius: this.borderRadius + 'px',
        borderColor: this.borderColor
      }
      return baseStyle;
    },
    operationStyle() {
      let baseStyle = {
        borderColor: this.borderColor,
        backgroundColor: this.bgColor
      }
      return baseStyle;
    },
    reduceStyle() {
      let baseStyle = {
        fontSize: this.fSize + 'px',
        color: this.fColor
      }
      if (this.disabled || this.reduceDisabled) {
        return Object.assign(baseStyle, {
          color: this.disabledColor
        })
      } else {
        return baseStyle;
      }
    },
    plusStyle() {
      let baseStyle = {
        fontSize: this.fSize + 'px',
        color: this.fColor
      }
      if (this.disabled || this.plusDisabled) {
        return Object.assign(baseStyle, {
          color: this.disabledColor
        })
      } else {
        return baseStyle;
      }
    },
    inputStyle() {
      let baseStyle = {
        fontSize: this.fSize + 'px',
        color: this.fColor,
        lineHeight: this.height + 'px'
      }
      if (this.disabled) {
        return Object.assign(baseStyle, {
          color: this.disabledColor
        })
      } else {
        return baseStyle;
      }
    }
  }
</script>