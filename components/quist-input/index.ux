<template>
  <stack>
      <div class="quist-input">
          <input class="quist-input__fix" />
          <div class="quist-input__content {{disabled ? 'quist-input__content--disabled' : 'quist-input__content--enable'}}" style="{{wrapper()}}">
            <div class="quist-input__img" style="{{icon()}}" if="prefixIcon">
              <image src="{{prefixIcon}}" class="quist-input__icon" />
            </div>
            <input id="quist-input__box" class="quist-input__box" type="text" value='{{searchValue}}' placeholder="{{placeholder}}" @focus="onfocus" @blur="onblur" disabled="{{disabled}}" @change="onchange" />
            <div class="quist-input__img" @click="clearClick" style="{{icon()}}" if="{{showClear}}">
              <image src="{{suffixIcon}}" class="quist-input__icon" />
            </div>
          </div>
        </div>
      </div>
  </stack>
</template>

<style lang="less">
  @import "../../style/index.less";
  @import "../../style/components/quist-input/index.less";
</style>

<script>

  export default {
    props: {
      placeholder: {
        type: String,
        default: ''
      },
      disabled: {
        type: Boolean,
        default: false
      },
      prefix: {
        type: String,
        default: ''
      },
      suffix: {
        type: String,
        default: ''
      },
      value: {
        type: String,
        default: null
      },
      wrapperStyle: {
        type: Object,
        default: {}
      },
      iconStyle: {
        type: Object,
        default: {}
      }
    },
    data() {
      return {
        width: '1080px',
        searchValue: '',
        showClear: false,
        replaceShow: true
      }
    },
    onInit() {
      this.initialize()
      this.$watch('value', 'change')
    },
    initialize() {
      this.prefixIcon = this.prefix;
      this.suffixIcon = this.suffix;
    },
    change() {
      this.searchValue = this.value
    },
    onchange(e) {
      let value = e.value
      if (value) {
        this.showClear = true
      } else {
        this.showClear = false
      }
      this.$emit('onChange', { value: e.value })
    },
    // onfocus() {
    //   this.$emit('onFocus', { value: this.searchValue })
    // },
    // onblur() {
    //   this.$emit('onBlur', { value: this.searchValue })
    // },
    clearClick() {
      // this.searchValue = ''
      this.showClear = false
      this.$emit('onChange', { value: '' })
    },
    focus() {
      this.$element("quist-input__box").focus({
        focus: true
      })
    },
    blur() {
      this.$element("quist-input__box").focus({
        focus: false
      })
    },
    wrapper() {
      let baseStyle = {
        width: this.width
      }
      return Object.assign(baseStyle, this.wrapperStyle)
    },
    icon() {
      let baseStyle = {
      }
      return Object.assign(baseStyle, this.iconStyle)
    }
  }
</script>